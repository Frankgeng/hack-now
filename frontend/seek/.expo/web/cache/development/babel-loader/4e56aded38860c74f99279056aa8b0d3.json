{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as firebase from \"firebase\";\n\nvar synonyms = require(\"synonyms\");\n\nvar Items = function () {\n  function Items() {\n    _classCallCheck(this, Items);\n\n    var firebaseConfig = {\n      apiKey: \"AIzaSyDZPaKcPaC0xnoxM1qYsUPEbuON1krqlP4\",\n      authDomain: \"seek-525ee.firebaseapp.com\",\n      databaseURL: \"https://seek-525ee.firebaseio.com\",\n      projectId: \"seek-525ee\",\n      storageBucket: \"seek-525ee.appspot.com\",\n      messagingSenderId: \"803806872501\",\n      appId: \"1:803806872501:web:ce8936ff30475b2bed4ffc\",\n      measurementId: \"G-2FWD6N6E9V\"\n    };\n    firebase.initializeApp(firebaseConfig);\n    firebase.analytics();\n    this.db = firebase.firestore();\n  }\n\n  _createClass(Items, [{\n    key: \"loadAllMatch\",\n    value: function loadAllMatch(name) {\n      var snapshot;\n      return _regeneratorRuntime.async(function loadAllMatch$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.db.collection(\"items\").get());\n\n            case 2:\n              snapshot = _context.sent;\n              console.log(synonyms(\"milk\"));\n              return _context.abrupt(\"return\", snapshot.docs.map(function (doc) {\n                return {\n                  itemId: doc.id,\n                  data: doc.data()\n                };\n              }));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return Items;\n}();\n\nexport { Items };","map":{"version":3,"sources":["/Users/bryanyuan1/Desktop/hack-now/frontend/seek/back_utils/Items.js"],"names":["firebase","synonyms","require","Items","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","analytics","db","firestore","name","collection","get","snapshot","console","log","docs","map","doc","itemId","id","data"],"mappings":";;;AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;;AAEA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;IAEMC,K;AACJ,mBAAc;AAAA;;AAEZ,QAAIC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,yCADW;AAEnBC,MAAAA,UAAU,EAAE,4BAFO;AAGnBC,MAAAA,WAAW,EAAE,mCAHM;AAInBC,MAAAA,SAAS,EAAE,YAJQ;AAKnBC,MAAAA,aAAa,EAAE,wBALI;AAMnBC,MAAAA,iBAAiB,EAAE,cANA;AAOnBC,MAAAA,KAAK,EAAE,2CAPY;AAQnBC,MAAAA,aAAa,EAAE;AARI,KAArB;AAWAZ,IAAAA,QAAQ,CAACa,aAAT,CAAuBT,cAAvB;AACAJ,IAAAA,QAAQ,CAACc,SAAT;AAGA,SAAKC,EAAL,GAAUf,QAAQ,CAACgB,SAAT,EAAV;AACD;;;;iCAEkBC,I;;;;;;;+CACM,KAAKF,EAAL,CAAQG,UAAR,CAAmB,OAAnB,EAA4BC,GAA5B,E;;;AAAjBC,cAAAA,Q;AACNC,cAAAA,OAAO,CAACC,GAAR,CAAYrB,QAAQ,CAAC,MAAD,CAApB;+CACOmB,QAAQ,CAACG,IAAT,CAAcC,GAAd,CAAkB,UAACC,GAAD,EAAS;AAChC,uBAAO;AAAEC,kBAAAA,MAAM,EAAED,GAAG,CAACE,EAAd;AAAkBC,kBAAAA,IAAI,EAAEH,GAAG,CAACG,IAAJ;AAAxB,iBAAP;AACD,eAFM,C;;;;;;;;;;;;;;AAMX,SAASzB,KAAT","sourcesContent":["import * as firebase from \"firebase\";\n\nconst synonyms = require(\"synonyms\");\n\nclass Items {\n  constructor() {\n    // Your web app's Firebase configuration\n    var firebaseConfig = {\n      apiKey: \"AIzaSyDZPaKcPaC0xnoxM1qYsUPEbuON1krqlP4\",\n      authDomain: \"seek-525ee.firebaseapp.com\",\n      databaseURL: \"https://seek-525ee.firebaseio.com\",\n      projectId: \"seek-525ee\",\n      storageBucket: \"seek-525ee.appspot.com\",\n      messagingSenderId: \"803806872501\",\n      appId: \"1:803806872501:web:ce8936ff30475b2bed4ffc\",\n      measurementId: \"G-2FWD6N6E9V\"\n    };\n    // Initialize Firebase\n    firebase.initializeApp(firebaseConfig);\n    firebase.analytics();\n\n    // fire store\n    this.db = firebase.firestore();\n  }\n\n  async loadAllMatch(name) {\n    const snapshot = await this.db.collection(\"items\").get();\n    console.log(synonyms(\"milk\"));\n    return snapshot.docs.map((doc) => {\n      return { itemId: doc.id, data: doc.data() };\n    });\n  }\n}\n\nexport { Items };\n"]},"metadata":{},"sourceType":"module"}